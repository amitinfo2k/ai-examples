# type: ignore

from typing import Any, Literal

from pydantic import BaseModel, Field, model_validator


class ServerConfig(BaseModel):
    """Server Confgiguration."""

    host: str
    port: int
    transport: str
    url: str


class PlannerTask(BaseModel):
    """Represents a single task generated by the Planner."""

    id: int = Field(description='Sequential ID for the task.')
    description: str = Field(
        description='Clear description of the task to be executed.'
    )
    status: (
        Any
        | Literal[
            'input_required',
            'completed',
            'error',
            'pending',
            'incomplete',
            'todo',
            'not_started',
        ]
        | None
    ) = Field(description='Status of the task', default='input_required')


class PodInfo(BaseModel):
    """Pod Info."""

    namespace: str | None = Field(description='Namespace')
    podname: str | None = Field(description='Pod Name')
    container: str | None = Field(description='Container Name')
    cluster_id: str | None = Field(description='Cluster ID')

    @model_validator(mode='before')
    @classmethod
    def set_dependent_var(cls, values):
        """Pydantic dependent setters."""
        return values


class PodInfoList(BaseModel):
    """Output schema for the Planner Agent."""

    original_query: str | None = Field(
        description='The original user query for context.'
    )

    pod_info: list[PodInfo] | None = Field(description='Pod information')


class AgentResponse(BaseModel):
    """Output schema for the Agent."""

    content: str | dict = Field(description='The content of the response.')
    is_task_complete: bool = Field(description='Whether the task is complete.')
    require_user_input: bool = Field(
        description='Whether the agent requires user input.'
    )
