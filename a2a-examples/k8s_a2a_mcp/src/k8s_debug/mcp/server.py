# type: ignore
import json
import os

from pathlib import Path

import google.generativeai as genai
import numpy as np
import pandas as pd
import subprocess
from typing import Optional, Dict, Any
from k8s_debug.common.utils import init_api_key
from mcp.server.fastmcp import FastMCP
from mcp.server.fastmcp.utilities.logging import get_logger


logger = get_logger(__name__)
AGENT_CARDS_DIR = 'agent_cards'
MODEL = 'models/embedding-001'


def generate_embeddings(text):
    """Generates embeddings for the given text using Google Generative AI.

    Args:
        text: The input string for which to generate embeddings.

    Returns:
        A list of embeddings representing the input text.
    """
    return genai.embed_content(
        model=MODEL,
        content=text,
        task_type='retrieval_document',
    )['embedding']


def load_agent_cards():
    """Loads agent card data from JSON files within a specified directory.

    Returns:
        A list containing JSON data from an agent card file found in the specified directory.
        Returns an empty list if the directory is empty, contains no '.json' files,
        or if all '.json' files encounter errors during processing.
    """
    card_uris = []
    agent_cards = []
    dir_path = Path(AGENT_CARDS_DIR)
    if not dir_path.is_dir():
        logger.error(
            f'Agent cards directory not found or is not a directory: {AGENT_CARDS_DIR}'
        )
        return agent_cards

    logger.info(f'Loading agent cards from card repo: {AGENT_CARDS_DIR}')

    for filename in os.listdir(AGENT_CARDS_DIR):
        if filename.lower().endswith('.json'):
            file_path = dir_path / filename

            if file_path.is_file():
                logger.info(f'Reading file: {filename}')
                try:
                    with file_path.open('r', encoding='utf-8') as f:
                        data = json.load(f)
                        card_uris.append(
                            f'resource://agent_cards/{Path(filename).stem}'
                        )
                        agent_cards.append(data)
                except json.JSONDecodeError as jde:
                    logger.error(f'JSON Decoder Error {jde}')
                except OSError as e:
                    logger.error(f'Error reading file {filename}: {e}.')
                except Exception as e:
                    logger.error(
                        f'An unexpected error occurred processing {filename}: {e}',
                        exc_info=True,
                    )
    logger.info(
        f'Finished loading agent cards. Found {len(agent_cards)} cards.'
    )
    return card_uris, agent_cards


def build_agent_card_embeddings() -> pd.DataFrame:
    """Loads agent cards, generates embeddings for them, and returns a DataFrame.

    Returns:
        Optional[pd.DataFrame]: A Pandas DataFrame containing the original
        'agent_card' data and their corresponding 'Embeddings'. Returns None
        if no agent cards were loaded initially or if an exception occurred
        during the embedding generation process.
    """
    card_uris, agent_cards = load_agent_cards()
    logger.info('Generating Embeddings for agent cards')
    try:
        if agent_cards:
            df = pd.DataFrame(
                {'card_uri': card_uris, 'agent_card': agent_cards}
            )
            df['card_embeddings'] = df.apply(
                lambda row: generate_embeddings(json.dumps(row['agent_card'])),
                axis=1,
            )
            return df
        logger.info('Done generating embeddings for agent cards')
    except Exception as e:
        logger.error(f'An unexpected error occurred : {e}.', exc_info=True)
        return None


def serve(host, port, transport):  # noqa: PLR0915
    """Initializes and runs the Agent Cards MCP server.

    Args:
        host: The hostname or IP address to bind the server to.
        port: The port number to bind the server to.
        transport: The transport mechanism for the MCP server (e.g., 'stdio', 'sse').

    Raises:
        ValueError: If the 'GOOGLE_API_KEY' environment variable is not set.
    """
    init_api_key()
    logger.info('Starting Agent Cards MCP Server')
    mcp = FastMCP('agent-cards', host=host, port=port)

    df = build_agent_card_embeddings()

    @mcp.tool(
        name='find_agent',
        description='Finds the most relevant agent card based on a natural language query string.',
    )
    def find_agent(query: str) -> str:
        """Finds the most relevant agent card based on a query string.

        This function takes a user query, typically a natural language question or a task generated by an agent,
        generates its embedding, and compares it against the
        pre-computed embeddings of the loaded agent cards. It uses the dot
        product to measure similarity and identifies the agent card with the
        highest similarity score.

        Args:
            query: The natural language query string used to search for a
                   relevant agent.

        Returns:
            The json representing the agent card deemed most relevant
            to the input query based on embedding similarity.
        """
        query_embedding = genai.embed_content(
            model=MODEL, content=query, task_type='retrieval_query'
        )
        dot_products = np.dot(
            np.stack(df['card_embeddings']), query_embedding['embedding']
        )
        best_match_index = np.argmax(dot_products)
        logger.debug(
            f'Found best match at index {best_match_index} with score {dot_products[best_match_index]}'
        )
        return df.iloc[best_match_index]['agent_card']

    @mcp.resource('resource://agent_cards/list', mime_type='application/json')
    def get_agent_cards() -> dict:
        """Retrieves all loaded agent cards as a json / dictionary for the MCP resource endpoint.

        This function serves as the handler for the MCP resource identified by
        the URI 'resource://agent_cards/list'.

        Returns:
            A json / dictionary structured as {'agent_cards': [...]}, where the value is a
            list containing all the loaded agent card dictionaries. Returns
            {'agent_cards': []} if the data cannot be retrieved.
        """
        resources = {}
        logger.info('Starting read resources')
        resources['agent_cards'] = df['card_uri'].to_list()
        return resources

    @mcp.resource(
        'resource://agent_cards/{card_name}', mime_type='application/json'
    )
    def get_agent_card(card_name: str) -> dict:
        """Retrieves an agent card as a json / dictionary for the MCP resource endpoint.

        This function serves as the handler for the MCP resource identified by
        the URI 'resource://agent_cards/{card_name}'.

        Returns:
            A json / dictionary
        """
        resources = {}
        logger.info(
            f'Starting read resource resource://agent_cards/{card_name}'
        )
        resources['agent_card'] = (
            df.loc[
                df['card_uri'] == f'resource://agent_cards/{card_name}',
                'agent_card',
            ]
        ).to_list()

        return resources

    @mcp.tool()
    def get_pod_description(namespace: str, pod_name: str) -> Dict[str, Any]:
        """
        Get the description of a Kubernetes pod in YAML format.
        
        Args:
            namespace: The namespace of the pod
            pod_name: The name of the pod
            
        Returns:
            The pod description in YAML format
        """
        try:
            result = subprocess.run(
                ["kubectl", "get", "pod", pod_name, "-n", namespace, "-o", "yaml"],
                capture_output=True,
                text=True,
                check=True,
            )
            return {"yaml": result.stdout}
        except subprocess.CalledProcessError as e:
            return {"error": e.stderr}


    @mcp.tool()
    def get_pod_events(namespace: str, pod_name: str) -> Dict[str, Any]:
        """
        Get events related to a Kubernetes pod.
        
        Args:
            namespace: The namespace of the pod
            pod_name: The name of the pod
            
        Returns:
            The pod events
        """
        try:
            result = subprocess.run(
                [
                    "kubectl",
                    "get",
                    "events",
                    "-n",
                    namespace,
                    "--field-selector",
                    f"involvedObject.name={pod_name}",
                    "-o",
                    "json",
                ],
                capture_output=True,
                text=True,
                check=True,
            )
            return {"events": json.loads(result.stdout)}
        except subprocess.CalledProcessError as e:
            return {"error": e.stderr}
        except json.JSONDecodeError:
            return {"error": "Failed to parse JSON output from kubectl"}


    @mcp.tool()
    def get_pod_logs(
        namespace: str, pod_name: str, container_name: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        Get logs from a Kubernetes pod.
        
        Args:
            namespace: The namespace of the pod
            pod_name: The name of the pod
            container_name: Optional name of the container in the pod
            
        Returns:
            The pod logs
        """
        cmd = ["kubectl", "logs", pod_name, "-n", namespace]
        if container_name:
            cmd.extend(["-c", container_name])
        
        try:
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                check=True,
            )
            return {"logs": result.stdout}
        except subprocess.CalledProcessError as e:
            return {"error": e.stderr}


    @mcp.tool()
    def list_pods(namespace: str) -> Dict[str, Any]:
        """
        List all pods in a namespace.
        
        Args:
            namespace: The namespace to list pods from
            
        Returns:
            List of pods in the namespace
        """
        try:
            result = subprocess.run(
                ["kubectl", "get", "pods", "-n", namespace, "-o", "json"],
                capture_output=True,
                text=True,
                check=True,
            )
            return {"pods": json.loads(result.stdout)}
        except subprocess.CalledProcessError as e:
            return {"error": e.stderr}
        except json.JSONDecodeError:
            return {"error": "Failed to parse JSON output from kubectl"}


    @mcp.tool()
    def describe_node(node_name: str) -> Dict[str, Any]:
        """
        Get the description of a Kubernetes node.
    
        Args:
            node_name: The name of the node
        
        Returns:
            The node description
        """
        try:
            result = subprocess.run(
                ["kubectl", "describe", "node", node_name],
                capture_output=True,
                text=True,
                check=True,
            )
            return {"description": result.stdout}
        except subprocess.CalledProcessError as e:
            return {"error": e.stderr}


    @mcp.tool()
    def get_resource_usage(namespace: str, pod_name: Optional[str] = None) -> Dict[str, Any]:
        """
        Get resource usage information for pods in a namespace.
    
        namespace: The namespace to get resource usage from
        pod_name: Optional name of a specific pod
        
        Returns:
            Resource usage information
        """
        cmd = ["kubectl", "top", "pods", "-n", namespace]
        if pod_name:
            cmd.append(pod_name)
    
        try:
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                check=True,
            )
            return {"usage": result.stdout}
        except subprocess.CalledProcessError as e:
            return {"error": e.stderr}
      
    
    logger.info(
        f'Agent cards MCP Server at {host}:{port} and transport {transport}'
    )
    mcp.run(transport=transport)